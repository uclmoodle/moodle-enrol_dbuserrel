<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Dbuserel enrolment tests.
 *
 * @package    enrol_dbuserrel
 * @category   test
 * @copyright  2019 Segun Babalola
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

defined('MOODLE_INTERNAL') || die();

global $CFG;

require_once($CFG->dirroot . '/enrol/dbuserrel/lib.php');

/**
 * Dbuserrel test case
 *
 * @package    enrol_dbuserrel
 * @category   test
 * @copyright  2019 Segun Babalola
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class enrol_dbuserrel_testcase extends advanced_testcase {

    private $remotetablename;
    public $dbuserrelplugin;

    /**
     * Setup required for all tests.
     */
    protected function setUp(): void {
        $this->resetAfterTest(true);
        $this->dbuserrelplugin = enrol_get_plugin('dbuserrel');
        $this->create_remote_source();
    }

    protected function tearDown(): void {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->remove_remote_source();
    }

    /**
     * Check relationahips are read successfully
     */
    public function test_readrelationships() {
        global $DB, $CFG;

        $tutoruser = $this->getDataGenerator()->create_user(array('idnumber' => 'tutor01'));
        $firsttuteeuser = $this->getDataGenerator()->create_user(array('idnumber' => 'student01'));
        $secondtuteeuser = $this->getDataGenerator()->create_user(array('idnumber' => 'student02'));

        $tutortuteerole = $this->getDataGenerator()->create_role(
            array(
                'shortname' => 'personal_tutor',
                'name' => 'Personal Tutor',
                'description' => 'Personal Tutor',
                'archetype' => 'editingteacher'
            )
        );

        $prevnrels = $DB->count_records('role_assignments',['component' => 'enrol_dbuserrel']);

        // Assign tutor to tutee 1
        $roleassign1 = new stdClass();

        // $roleassign1->id = 1;
        $roleassign1->remote_subject_id = 'tutor01';
        $roleassign1->remote_object_id = 'student01';
        $roleassign1->remote_role = 'personal_tutor';

        $DB->insert_record($this->remotetablename, $roleassign1, false, false);

        // Assign tutor to tutee 2
        $roleassign2 = new stdClass();

        // $roleassign1->id = 2;
        $roleassign2->remote_subject_id = 'tutor01';
        $roleassign2->remote_object_id = 'student02';
        $roleassign2->remote_role = 'personal_tutor';

        $DB->insert_record($this->remotetablename, $roleassign2, false, false);

        // Initialise plugin
        $this->dbuserrelplugin->set_config('dbhost', $CFG->dbhost);
        $this->dbuserrelplugin->set_config('dbname', $CFG->dbname);
        $this->dbuserrelplugin->set_config('dbtype', $CFG->dbtype);
        $this->dbuserrelplugin->set_config('dbuser', $CFG->dbuser);
        $this->dbuserrelplugin->set_config('dbpass', $CFG->dbpass);
        $this->dbuserrelplugin->set_config('dbsetupsql', '');

        // Need to prefix table name before setting it as config because it would be used as if external to Moodle;
        $this->dbuserrelplugin->set_config('remoteenroltable', $CFG->prefix . $this->remotetablename);

        $this->dbuserrelplugin->set_config('remotesubjectuserfield', 'remote_subject_id');
        $this->dbuserrelplugin->set_config('remoteobjectuserfield', 'remote_object_id');
        $this->dbuserrelplugin->set_config('remoterolefield', 'remote_role');
        $this->dbuserrelplugin->set_config('debugdb', false);

        $this->dbuserrelplugin->set_config('localsubjectuserfield', 'user_idnumber');
        $this->dbuserrelplugin->set_config('localobjectuserfield', 'user_idnumber');
        $this->dbuserrelplugin->set_config('localrolefield', 'shortname');

        $this->dbuserrelplugin->setup_enrolments(false);
        $this->assertEquals($prevnrels + 2, $DB->count_records('role_assignments', ['component' => 'enrol_dbuserrel']));
    }

    private function create_remote_source()
    {
        global $DB;

        $dbman = $DB->get_manager();

        $this->remotetablename = 'dbuserrel_' . date('YmdHis');
        $table = new xmldb_table($this->remotetablename);

        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
        $table->add_field('remote_subject_id', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);
        $table->add_field('remote_object_id', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);
        $table->add_field('remote_role', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);
        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));

        if (!$dbman->table_exists($table)) {
            $dbman->create_table($table);
        }

    }

    private function remove_remote_source() {
        global $DB;

        $dbman = $DB->get_manager();

        $table = new xmldb_table($this->remotetablename);

        if ($dbman->table_exists($table)) {
            $dbman->drop_table($table);
        }
    }
}
